#********************************************************************
# 1.1 INSTALAR PAQUETES DE FUNCIONES
#********************************************************************
# Lista de paquetes de funciones a instalar
.packages = c("ggplot2", "plotly", "xlsx","scales")
# Instala los paquetes sinó los tienes instalados
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
.packages = c("ggplot2", "plotly", "xlsx","scales")
# Instala los paquetes sinó los tienes instalados
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Carga los paquetes sinó los tienes cargados
lapply(.packages, require, character.only=TRUE)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
View(getmode)
setwd("C:/Users/apalmad/Desktop/Analiza tus Datos/Proyectos R/codigo y datos/Primera Tarea de R")
setwd("C:/Users/apalmad/Desktop/Analiza tus Datos/Proyectos R/codigo y datos/Primera Tarea de R")
setwd("C:/Users/apalmad/Desktop/Analiza tus Datos/Proyectos R/codigo y datos/Primera Tarea de R")
#********************************************************************
# 2. IMPORTAR/LEER DATOS
#********************************************************************
# Recuerda que debes configurar antes tu working directory ;) y asegúrate que apunta al fichero Excel
mydata <- read.table("malaria_number_of_deaths_reported.csv", header=TRUE,sep=",")
mydata <- read.table("malaria_number_of_deaths_reported.csv", header=TRUE,sep=",")
#********************************************************************
# 2. IMPORTAR/LEER DATOS
#********************************************************************
# Recuerda que debes configurar antes tu working directory ;) y asegúrate que apunta al fichero Excel
mydata <- read.table("malaria_number_of_deaths_reported.xlsx", header=TRUE,sep=",")
.packages = c("ggplot2", "plotly", "xlsx","scales","read")
# Instala los paquetes sinó los tienes instalados
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
#********************************************************************
# 1.2 CARGAR PAQUETES O CREAR FUNCIONES
#********************************************************************
# Carga los paquetes sinó los tienes cargados
lapply(.packages, require, character.only=TRUE)
.packages = c("ggplot2", "plotly", "xlsx","scales","readr")
# Instala los paquetes sinó los tienes instalados
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
#********************************************************************
# 1.2 CARGAR PAQUETES O CREAR FUNCIONES
#********************************************************************
# Carga los paquetes sinó los tienes cargados
lapply(.packages, require, character.only=TRUE)
lapply(.packages, require, character.only=TRUE)
mydata <- read_csv("malaria_number_of_deaths_reported.csv")
View(mydata)
mydata[1,19]
mydata[1,18]
min(mydata[,18])
max(mydata[,18])
min(mydata[,18],na.rm = True)
min(mydata[,18],na.rm = "True")
max(mydata[,18],na.rm = TRUE)
len(mydata)}
len(mydata)
length(mydata)
varNum <- 18
# Input2: #selecciona el número de clases que quieres obtener
Nbins <- 4
x <- mydata[,varNum] #guardamos la variable x (variable numérica)
binwidth <- (max(x)-min(x))/(Nbins-1) #el ancho de las clases
# Histograma utilizando ggplot para obtener los datos para dibujar el histograma
histograma <- ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal() # creamos el histograma y nos lo guardamos en la variable "histograma"
# Histograma utilizando ggplot para obtener los datos para dibujar el histograma
histograma <- ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal() # creamos el histograma y nos lo guardamos en la variable "histograma"
pg <- ggplot_build(histograma) #guardamos los datos del histograma (la tabla de frecuencias)
pg <- ggplot_build(histograma)
pg <- ggplot_build(histograma)
histograma <- ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal()
histograma
View(x)
#********************************************************************
# 4. METODOLOGÍA
#********************************************************************
# Preparamos los inputs para ponerlos en los plots
x <- mydata[,varNum] > 0 #guardamos la variable x (variable numérica)
x <- na.omit(mydata[,varNum])
View(x)
binwidth <- (max(x)-min(x))/(Nbins-1)
histograma <- ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal()
pg <- ggplot_build(histograma)
histograma <- ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0)) +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal()
pg <- ggplot_build(histograma)
mydata <- read_csv("malaria_number_of_deaths_reported.csv",skip = 1)
View(mydata)
mydata <- read_csv("malaria_number_of_deaths_reported.csv",na = 0)
mydata <- read_csv("malaria_number_of_deaths_reported.csv",na = 0)
mydata <- read_csv("malaria_number_of_deaths_reported.csv")
View(mydata)
mydata <- read_csv("malaria_number_of_deaths_reported.csv",skip = 1)
x <- na.omit(mydata[,varNum])
binwidth <- round((max(x)-min(x))/(Nbins-1) , 0)
histograma <- ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0)) +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal()
pg <- ggplot_build(histograma)
pg <- ggplot2_build(histograma) #guardamos los datos del histograma (la tabla de frecuencias)
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a")
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
ggplot(mydata,aes(x=mydata[,varNum])) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
x1 <- na.omit(mydata[,varNum]) #guardamos la variable x (variable numérica)
binwidth <- round((max(x1)-min(x1))/(Nbins-1)
histograma <- ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0))
ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a")
ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a")
ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a")
ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a")
ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a")
ggplot2(mydata,aes(x=x1)) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a")
max(x1)
min(x1
min(x1)
min(x1)
(max(x1)-min(x1))/(Nbins-1)
round((max(x1)-min(x1))/(Nbins-1) , 0)
ggplot2(mydata,aes(x=x1)) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a")
ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth = binwidth,colour="black", fill="#e2746a")
histograma <- ggplot(mydata,aes(x=x1)) +
geom_histogram(colour="black", fill="#e2746a")
ggplot(mydata,aes(x=x1)) +
geom_histogram(colour="black", fill="#e2746a")
mydata <- readxl::read_xlsx("malaria_number_of_deaths_reported.csv")
mydata <- readxl::read_xlsx("cars1.xlsx")
# Input1: #selecciona la variable numérica que quieras, por ejemplo la número 3: "Edad"
varNum <- 1
# Input2: #selecciona el número de clases que quieres obtener
Nbins <- 5
# Preparamos los inputs para ponerlos en los plots
x1 <- na.omit(mydata[,varNum]) #guardamos la variable x (variable numérica)
binwidth <- round((max(x1)-min(x1))/(Nbins-1) , 0)
ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth = binwith, colour="black", fill="#e2746a")
ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth =  bindwith, colour="black", fill="#e2746a"
ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth =  bindwith, colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0)) +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal()
histograma <- ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth =  binwidth, colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0)) +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal()
ggplot(mydata,aes(x=x1)) +
geom_histogram(binwidth =  binwidth, colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0)) +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal()
View(x1)
ggplot(mydata,aes(x=na.omit(mydata[,varNum]))) +
geom_histogram(binwidth =  binwidth, colour="black", fill="#e2746a")
ggplot(mydata,aes(x=na.omit(mydata[,varNum]))) +
geom_histogram(binwidth =  10, colour="black", fill="#e2746a")
na.omit(mydata[,varNum])
ggplot(mydata,mapping= aes(x=speed)) +
geom_histogram(binwidth =  binwidth, colour="black", fill="#e2746a")
ggplot(mydata,mapping= aes(x=speed)) +
geom_histogram(binwidth =  binwidth, colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0)) +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal()
histograma <- ggplot(mydata,mapping= aes(x=speed)) +
geom_histogram(binwidth =  binwidth, colour="black", fill="#e2746a") +
scale_y_continuous(expand = c(0,0)) +
xlab(names(mydata)[varNum]) + ylab("Frecuencia absoluta (nº de repeticiones)") +
ggtitle(paste("Histograma de la variable ", names(mydata)[varNum],sep = "")) +
theme_minimal()
pg <- ggplot_build(histograma)
View(pg)
pg$data[[1]]$xmin
pg$data[[1]]$xmax
pg$data[[1]]$x
pg$data[[1]]$count
valoresMinClase <- pg$data[[1]]$xmin
valoresMaxClase <- pg$data[[1]]$xmax
valoresMedioClase <- pg$data[[1]]$x
frecuenciaAbsoluta <- pg$data[[1]]$count
frecuenciaAbsolutaAcumulada <- cumsum(frecuenciaAbsoluta)
frecuenciaRelativa <- pg$data[[1]]$count/sum(pg$data[[1]]$count)
frecuenciaRelativaAcumulada <- cumsum(frecuenciaRelativa)
tablaFrecuencias <- data.frame(Valores.Min.Clase = valoresMinClase,
Valores.Max.Clase = valoresMaxClase,
Valores.Medio.Clase = valoresMedioClase,
Frecuencia.Absoluta = frecuenciaAbsoluta,
Frecuencia.Absoluta.Acumulada = frecuenciaAbsolutaAcumulada,
Frecuencia.Relativa = frecuenciaRelativa,
Frecuencia.Relativa.Acumulada = frecuenciaRelativaAcumulada)
View(tablaFrecuencias)
pg$data[[1]]$xmin
pg$data[[1]]$xmax
pg$data[[1]]$x
pg$data[[1]]$count
cumsum(frecuenciaAbsoluta)
hist(x) #no especificamos nº de clases, por defecto 10
hist(x,Nbins) #especificamos nº de clases = Nbins
hist(x1)
x1 <- na.omit(mydata[,varNum]) #guardamos la variable x (variable numérica)
binwidth <- round((max(x1)-min(x1))/(Nbins-1)
hist(x1) #no especificamos nº de clases, por defecto 10
hist(x,Nbins)
hist(x1) #no especificamos nº de clases, por defecto 10
hist(x1,Nbins
hist(x1) #no especificamos nº de clases, por defecto 10
hist(x1,Nbins)
hist(x1)
na.omit(mydata[,varNum])
na.omit(mydata[,varNum])
x1
hist(x1
hist(x1)
hist(x1)
hist(x1[,1])
hist(x1[1])
hist(x=x1)
x1 <- na.omit(mydata[,varNum])
x1[1]
hist(x=x1[1])
vec+{++}
vector(x1)
vector(x1[1])
x1
hist(x=x1)
x1 <- as.numeric(na.omit(mydata[,varNum]))
# Plot con la función base hist
hist(x= as.numeric(x1[1]))
histograma + scale_x_continuous(breaks=round(seq(min(pg$data[[1]]$xmin),max(pg$data[[1]]$xmax),by=binwidth),digits = 1)) #corregimos los valores de las clases en el eje horizontal
ggplotly(histograma + scale_x_continuous(breaks=round(seq(min(pg$data[[1]]$xmin),max(pg$data[[1]]$xmax),by=binwidth),digits = 2))) # convertimos ggplot to plotly
library(xlsx)
write.xlsx(tablaFrecuencias, "Tabla Frecuencias.xlsx")
library(xlsx)
detach("package:xlsx", unload = TRUE)
library(xlsx)
.packages = c("ggplot2", "plotly", "xlsx","scales","readr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
ibrary(xlsx)
write.xlsx(tablaFrecuencias, "Tabla Frecuencias.xlsx")
ibrary(xlsx)
write.xlsx(tablaFrecuencias, "Tabla Frecuencias.xlsx")
library(xlsx)
write.xlsx(tablaFrecuencias, "Tabla Frecuencias.xlsx")
x= as.numeric(x1[1]
x= as.numeric(x1[1])
x= as.numeric(x1[1])
as.double(x1[1]
as.double(x1[1])
as.double(x1[1])
