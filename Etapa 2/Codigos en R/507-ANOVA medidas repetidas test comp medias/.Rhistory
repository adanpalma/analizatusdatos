# Carga los paquetes sinó los tienes cargados
lapply(.packages, require, character.only=TRUE)
#-------------------------------------------------------------------------------
#*******************************************************************************
# PASO 0: CONSIGUE TU BASE DATOS Y LÉELA CON INTELIGENCIA
#*******************************************************************************
# PASO 0.1 - LEE TUS DATOS (IMPORTAR)
#-------------------------------------------------------------------------------
# Utiliza este comando para leer archivos con TABULACIÓN como separador
# misDatos <- read.delim(file.choose(),header = TRUE)
# Utiliza este comando para leer archivos con separador
# misDatos <- read.csv(file.choose(),header = TRUE,sep = '  ')
# Voy a utilizar datos de R de ejemplo:
misDatos <- iris
# 3-Factor: variables con caracteres. Siempre seran categóricas.
str(misDatos)
variables <- split(names(misDatos),sapply(misDatos, function(x) paste(class(x), collapse=" ")))
# La variable edad es numérica
varNumericas <- c(variables$numeric,variables$integer)
# Las variables categóricas son los factores.
varCategoricas <- variables$factor
# La PREGUNTA: inferir si las poblaciones de setosa y versicolor son diferentes
# en relación al Sepal.Length
# Encuentro las filas que sean de versicolor o setosa
filasVersicolorYSetosa <- (misDatos[,varCategoricas[1]]=="versicolor") | (misDatos[,varCategoricas[1]]=="setosa")
# Copio las filas de versicolor y setosa. La primera columna será el sepal.length, la segunda
# species
varEstudio <- misDatos[filasVersicolorYSetosa,c(varNumericas[1],varCategoricas[1])]
# Ahora tienes una columna con sepal.length y la segunda de species con versicolor y setosa
# PASO 2.1: RESTRICCIONES NORMALIDAD >> Los dos grupos son Normales p>0.05
#*******************************************************************************
shapiro.test(varEstudio[varEstudio[,2]=="setosa",1])
# Setosa es Normal
shapiro.test(varEstudio[varEstudio[,2]=="versicolor",1])
# Versicolor es Normal
# PASO 2.2: RESTRICCIONES VARIANZA >> Las varianzas son DIFERENTES p<0.05
#*******************************************************************************
var.test(Sepal.Length ~ Species, data = varEstudio)
# T-test con igualdad de varianzas con un data frame
t.test(Sepal.Length ~ Species, data = varEstudio, var.equal = FALSE)
df <- varEstudio
# Histograma de densidad para comparar grupos
#-------------------------------------------------------------------------------
name1 <- names(df)[1]
name2 <- names(df)[2]
p1<- ggplot(df, aes(df[,1], fill = df[,2])) +
geom_density(alpha = 0.2) +
xlab("Rango de clases") + ylab("Densidad") +
theme_minimal() +
ggtitle(paste("Histograma de Densidad", name1,"comparando por grupos de ",name2)) +
theme(plot.title = element_text(hjust = 0.5)) +
guides(fill=guide_legend(title=""))
# Boxplot de dos grupos
#-------------------------------------------------------------------------------
name1 <- names(df)[1]
name2 <- names(df)[2]
p2<- plot_ly(y = df[,name1], x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relación al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
subplot(p1,p2)
# importar datos
datos = iris
View(datos)
# seleccionamos la variable que vamos a analizar
df <- iris[1]
dvector <- df[,1]
hist(dvector,breaks = 20,freq = FALSE, main = "Título del Gráfico",xlab = "Título Eje X",ylab = "Título Eje Y")
boxplot(dvector)
library(car)
qqPlot(dvector)
library(plotly)
library(ggplot2)
library(ggpubr)
# la entrada es un df con la variable cuantitativa
name1 <- names(df)
# Histograma de frecuencias con plotly
p1<-plot_ly(x = df[,name1], type = "histogram",name = name1,marker=list(color='#FF6666'))%>%
layout(title = paste("Histograma de Frecuencias de",name1),yaxis = list(title = name1),bargap=0.005*(max(df[,name1])-min(df[,name1])))
# Boxplot
p2<-plot_ly(y = df[,name1], type = "box",name = name1,boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1),yaxis = list(title = name1))
# QQplot
p3<-ggqqplot(df, x = names(df),color = "#FF6666",add.params = list(color = "black"))+
xlab("Distribución Teórica Normal") + ylab("Cuartiles reales") +
theme_minimal() +
ggtitle(paste("QQ-plot de ", name1,sep = "")) +
theme(plot.title = element_text(hjust = 0.5))
p3 <- ggplotly(p3)
p <- subplot(p1, p2, p3)%>%
layout(title = paste("Histograma de Frecuencias Boxplot y QQplot para la variable  ", name1,sep = ""))
p
shapiro.test(dvector) # fíjate que esta función trabaja con los valores NO los dataframes
# importar datos
datos = iris
# seleccionamos una variable cuantativa y un factor
df <- iris[c(1,5)]
View(df)
library(plotly)
# Boxplot con puntos con plotly
name1 <- names(df)[1]
name2 <- names(df)[2]
plot_ly(y = df[,name1], x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relación al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
library(ggpubr)
# Dibujamos el diagrama de error con la media +/- la dev estandar
ggerrorplot(df, x = names(df)[2], y = names(df)[1],
desc_stat = "mean_sd")+
ggtitle("Titulo del grafico")
View(df)
leveneTest(Sepal.Length ~ Species, data = df)
View(df)
df[2]=="versicolor"
df[2]=="virginica"
rowSel <- df[2]=="versicolor"|df[2]=="virginica"
View(rowSel)
df = df[rowSel,]
View(df)
# 1 DESCRIPCIÓN
# diagrama de error, boxplot de un factor
library(plotly)
# Boxplot con puntos con plotly
name1 <- names(df)[1]
name2 <- names(df)[2]
plot_ly(y = df[,name1], x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relación al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
library(ggpubr)
# Dibujamos el diagrama de error con la media +/- la dev estandar
ggerrorplot(df, x = names(df)[2], y = names(df)[1],
desc_stat = "mean_sd")+
ggtitle("Titulo del grafico")
# 2 Test de igualdad de Varianzas
# Test de Levene
leveneTest(Sepal.Length ~ Species, data = df)
datos = iris
View(datos)
diffPet_Sep <-iris[c(1)]-iris[c(3)]
View(diffPet_Sep)
names(diffPet_Sep) <- "P_S.Length"
View(diffPet_Sep)
View(datos)
dfTOT <- cbind(diffPet_Sep,datos[5])
View(dfTOT)
df <- dfTOT[dfTOT[,2]=="setosa",][1]
valorCritico <- 3 # 3 cm
View(df)
dfTOT[,2]=="setosa"
aux <- dfTOT[,2]=="setosa"
df <- dfTOT[aux,][1]
View(df)
library(ggplot2)
# Histograma de frecuencias con ggplot2
name1 <- names(df)
x <- df[,name1]
n <- length(x)
binwidth <- 3.49*sd(x)/(n^(1/3))
ggplot(df,aes(x=df[,name1])) +
geom_histogram(binwidth = binwidth,
colour="black", fill="#FF6666") +
geom_vline(aes(xintercept=mean(valorCritico, na.rm=T,colour = "Mean")),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
xlab("Rango de clases") + ylab("Frecuencia absoluta") +
theme_minimal() +
ggtitle(paste("Histograma de Frecuencias", name1,sep = "")) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_colour_manual("Legend title", values = c("black", "red"))
# Histograma de frecuencias con ggplot2
name1 <- names(df)
x <- df[,name1]
n <- length(x)
binwidth <- 3.49*sd(x)/(n^(1/3))
ggplot(df,aes(x=df[,name1])) +
geom_histogram(binwidth = binwidth,
colour="black", fill="#FF6666") +
geom_vline(aes(xintercept=mean(valorCritico, na.rm=T,colour = "Mean")),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
xlab("Rango de clases") + ylab("Frecuencia absoluta") +
theme_minimal() +
ggtitle(paste("Histograma de Frecuencias", name1,sep = "")) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_colour_manual("Legend title", values = c("black", "red"))
dvector <- df[,1]
shapiro.test(dvector)
t.test(dvector,mu = valorCritico)
t.test(dvector,mu = valorCritico,alternative = "less")
t.test(dvector,mu = valorCritico,alternative = "greater")
t.test(dvector,mu = valorCritico)
mean(dvector)
# importar datos
datos = iris
# seleccionamos una variable cuantativa y un factor
diffPet_Sep <-iris[c(1)]-iris[c(3)]
names(diffPet_Sep) <- "P_S.Length"
dfTOT <- cbind(diffPet_Sep,iris[5])
rowSel <- dfTOT[,2]=="setosa"|dfTOT[,2]=="versicolor"
df <- dfTOT[rowSel,]
View(df)
# Boxplot de dos factores y diagrama de medias
library(ggpubr)
# El diagrama de error con el IC de la media de dos factores
ggline(df, x = names(df)[2], y = names(df)[1],
add = c("mean_ci", "jitter"),
palette = "jco")+
ggtitle("Titulo del grafico")
library(plotly)
# Boxplot con puntos con plotly
name1 <- names(df)[1]
name2 <- names(df)[2]
plot_ly(y = df[,name1], x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relación al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
dvector <- df[df[,2]=="setosa",1]
shapiro.test(dvector)
dvector <- df[df[,2]=="versicolor",1]
shapiro.test(dvector)
leveneTest(P_S.Length ~ Species, data = df)
t.test(P_S.Length ~ Species, data = df, var.equal = TRUE)
# --> TEST PARAMÉTRICO CON CORRECCIÓN DE WELCH (DESIGUALDAD DE VARIANZAS)
# Si es normal y varianzas diferentes --> T-test Welch de dos muestras independientes
t.test(P_S.Length ~ Species, data = df, var.equal = FALSE)
wilcox.test(P_S.Length ~ Species, data = df)
setwd("D:/jordi/blog/Infoproductos/ANALIZA TUS DATOS/CODIGOS RSTUDIO/505-test comp medias 2 medidas repetidas  (2 grupos depen)")
datos <- read.table("Depresion.csv",header = TRUE,sep = ";")
View(datos)
dfTOT <- datos
View(dfTOT)
c(dfTOT[,1],dfTOT[,2])
length(dfTOT[,1])
rep("0",length(dfTOT[,1]))
rep("6",length(dfTOT[,2]))
c(rep("0",length(dfTOT[,1])),rep("6",length(dfTOT[,2])))
df <- data.frame(
Depresion = c(dfTOT[,1],dfTOT[,2]),
Mes = c(rep("0",length(dfTOT[,1])),rep("6",length(dfTOT[,2])))
)
View(df)
library(ggpubr)
# El diagrama de error con el IC de la media de dos factores
ggline(df, x = names(df)[2], y = names(df)[1],
add = c("mean_ci", "jitter"),
palette = "jco")+
ggtitle("Titulo del grafico")
library(plotly)
# Boxplot con puntos con plotly
name1 <- names(df)[1]
name2 <- names(df)[2]
plot_ly(y = df[,name1], x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relación al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
df[,2]=="0"
dvector <- df[df[,2]=="0",1]
View(df)
shapiro.test(dvector)
# para el mes 6
dvector <- df[df[,2]=="6",1]
shapiro.test(dvector)
dvector0 <- df[df[,2]=="0",1]
dvector6 <- df[df[,2]=="6",1]
dvector <- dvector0-dvector6
shapiro.test(dvector)
wilcox.test(Depresion ~ Mes, data = df, paired = TRUE)
t.test(Depresion ~ Mes, data = df, paired = TRUE)
wilcox.test(Depresion ~ Mes, data = df, paired = TRUE)
wilcox.test(Depresion ~ Mes, data = df, paired = TRUE)
# importar datos
datos = iris
# seleccionamos una variable cuantativa y un factor
diffPet_Sep <-iris[c(1)]-iris[c(3)]
names(diffPet_Sep) <- "P_S.Length"
# Seleccionamos la medida y la variable cualitativa
df <- cbind(diffPet_Sep,iris[5])
View(df)
View(df)
# 1- Descripción
# Boxplot de dos factores y diagrama de medias
library(ggpubr)
# El diagrama de error con el IC de la media de dos factores
ggline(df, x = names(df)[2], y = names(df)[1],
add = c("mean_ci", "jitter"),
palette = "jco")+
ggtitle("Titulo del grafico")
library(plotly)
# Boxplot con puntos con plotly
name1 <- names(df)[1]
name2 <- names(df)[2]
plot_ly(y = df[,name1], x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relación al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
resultados.aov <- aov(P_S.Length ~ Species, data = df)
View(df)
resultados.aov$coefficients
resultados.aov$residuals
resultados.aov$model
summary.aov(resultados.aov)
aov_residuos <- residuals(object = resultados.aov )
shapiro.test(x = aov_residuos )
plot(resultados.aov, 2)
leveneTest(P_S.Length ~ Species, data = df)
anova(P_S.Length ~ Species, data = df)
aov(P_S.Length ~ Species, data = df)
oneway.test(P_S.Length ~ Species, data = df)
kruskal.test(P_S.Length ~ Species, data = df)
TukeyHSD(resultados.aov)
pairwise.t.test(df[,1], df[,2],p.adjust.method = "BH")
pairwise.wilcox.test(df[,1], df[,2],p.adjust.method = "BH")
setwd("D:/jordi/blog/Infoproductos/ANALIZA TUS DATOS/CODIGOS RSTUDIO/507-ANOVA medidas repetidas test comp medias")
# importar datos
datos <- read.table("Depresion.csv",header = TRUE,sep = ";")
# seleccionamos una variable 2 medidas pareadas
dfTOT <- datos
# creamos un data frame con las dos variables en la misma columna y un factor con el nombre de las variables
df <- data.frame(
Depresion = c(dfTOT[,1],dfTOT[,2]),
Mes = c(rep("0",length(dfTOT[,1])),rep("6",length(dfTOT[,2]))),
ID = c(seq(1,length(dfTOT[,1])),seq(1,length(dfTOT[,1])))
)
# importar datos
datos <- read.table("Depresion.csv",header = TRUE,sep = ";")
# seleccionamos una variable 2 medidas pareadas
dfTOT <- datos
# creamos un data frame con las dos variables en la misma columna y un factor con el nombre de las variables
df <- data.frame(
Depresion = c(dfTOT[,1],dfTOT[,2]),
Mes = c(rep("0",length(dfTOT[,1])),rep("6",length(dfTOT[,2]))),
ID = c(seq(1,length(dfTOT[,1])),seq(1,length(dfTOT[,1])))
)
View(df)
setwd("D:/jordi/blog/Infoproductos/ANALIZA TUS DATOS/CODIGOS RSTUDIO/507-ANOVA medidas repetidas test comp medias")
# importar datos
datos <- read.table("Depresion.csv",header = TRUE,sep = ";")
# seleccionamos una variable 2 medidas pareadas
dfTOT <- datos
View(datos)
# creamos un data frame con las dos variables en la misma columna y un factor con el nombre de las variables
df <- data.frame(
Depresion = c(dfTOT[,1],dfTOT[,2]),
Mes = c(rep("0",length(dfTOT[,1])),rep("6",length(dfTOT[,2]))),
ID = c(seq(1,length(dfTOT[,1])),seq(1,length(dfTOT[,1])))
)
View(df)
seq(1,length(dfTOT[,1]))
seq(1,length(dfTOT[,1]))
# Boxplot de 1 factor y diagrama de medias
library(ggpubr)
# El diagrama de error con el IC de la media de dos factores
ggline(df, x = names(df)[2], y = names(df)[1],
add = c("mean_ci", "jitter"),
palette = "jco")+
ggtitle("Titulo del grafico")
library(plotly)
# Boxplot con puntos con plotly
name1 <- names(df)[1]
name2 <- names(df)[2]
plot_ly(y = df[,name1], x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relación al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
library(lme4)
library(lmerTest)
# --> TEST PARAMÉTRICO - ANOVA DE MEDIDAS REPETIDAS (si son normales todas las variables)
rmaModel <- lmer(Depresion ~ Mes + (1|ID), data = df)
anova(rmaModel)
library(lme4)
rmaModel <- lmer(Depresion ~ Mes + (1|ID), data = df)
anova(rmaModel)
rmaModel
resultados.aov <- anova(rmaModel)
View(resultados.aov)
library(lmerTest)
install.packages("lmerTest")
library(lmerTest)
anova(rmaModel)
rmaModel <- lmer(Depresion ~ Mes + (1|ID), data = df)
anova(rmaModel)
# 2 Comparar los tres grupos
library(lme4)
library(lmerTest)
rmaModel <- lmer(Depresion ~ Mes + (1|ID), data = df)
anova(rmaModel)
residuals(rmaModel)
shapiro.test(residuals(rmaModel))
friedman.test(df[,1],group=df[,2],blocks = df[,3])
# importar datos
datos = ToothGrowth
View(datos)
df[3] <- as.factor(df[,3])
df <- datos
df[3] <- as.factor(df[,3])
View(df)
# 1- Descripción
# Boxplot de dos factores y diagrama de medias
library(ggpubr)
# El diagrama de error con el IC de la media de dos factores
ggline(df, x = names(df)[2], y = names(df)[1],
add = c("mean_ci", "jitter"),
color = names(df)[3], palette = "jco")+
ggtitle("Titulo del grafico")
library(ggplot2)
# boxplot de dos factores con ggplot2
ggplot(df, aes(x=df[,2], y=df[,1], fill=df[,3])) +
geom_boxplot() +
ggtitle("Titulo del grafico") +
xlab("Titulo Var Cuant") + ylab("Titulo Factor 1")+ labs(fill = "Titulo Factor 2")
res.aov1 <- aov(len ~ supp + dose, data = df)
summary(res.aov1)
res.aov2 <- aov(len ~ supp * dose, data = df)
summary(res.aov2)
table(df$supp,df$dose)
aov_residuos <- residuals(object = res.aov1 )
shapiro.test(x = aov_residuos )
# Hacemos un qqplot de los residuos
plot(res.aov1, 2)
# Homogeneidad de los residuos
plot(res.aov1, 1)
# TEST DE NORMALIDAD >> miramos si los residuos del test son normales
# Copiamos los residuos
aov_residuos <- residuals(object = res.aov2 )
# Shapiro-Wilk test de normalidad
shapiro.test(x = aov_residuos )
# Hacemos un qqplot de los residuos
plot(res.aov2, 2)
# Homogeneidad de los residuos
plot(res.aov2, 1)
summary(glht(res.aov1, linfct = mcp(dose = "Tukey")))
install.packages("multcomp")
pairwise.t.test(df[,1], df[,2],p.adjust.method = "BH")
summary(glht(res.aov1, linfct = mcp(dose = "Tukey")))
library(multcomp)
summary(glht(res.aov1, linfct = mcp(dose = "Tukey")))
pairwise.t.test(df[,1], df[,2],p.adjust.method = "BH")
pairwise.t.test(df[,1], df[,3],p.adjust.method = "BH")
# ES EL TWO-SIDED ANOVA TEST NO PARAMÉTRICO
scheirerRayHare(len ~ supp + dose,
data=df)
install.packages("rcompanion")
library(rcompanion)
scheirerRayHare(len ~ supp + dose,
data=df)
table(df$supp,df$dose)
Anova(res.aov2,type = "III")
# importar datos
datos <- mtcars
# seleccionamos las variables cuantitativas que queramos (mas de dos)
df <- datos[c(1,3,4,5,6,7)]
library("Hmisc")
# Matriz de correlacion con el paquete Hmisc
tcor <- rcorr(as.matrix(df))
tcor
install.packages("Hmisc")
# importar datos
datos <- mtcars
# seleccionamos las variables cuantitativas que queramos (mas de dos)
df <- datos[c(1,3,4,5,6,7)]
library("Hmisc")
# Matriz de correlacion con el paquete Hmisc
tcor <- rcorr(as.matrix(df))
tcor
# importar datos
datos <- mtcars
# seleccionamos las variables cuantitativas que queramos (mas de dos)
df <- datos[c(1,3,4,5,6,7)]
library("Hmisc")
tcor <- rcorr(as.matrix(df),type = "pearson")
tcor
tcor <- rcorr(as.matrix(df),type = "spearman")
tcor
# importar datos
datos <- mtcars
# seleccionamos las variables cuantitativas que queramos (mas de dos)
df <- datos[c(1,7)]
library("Hmisc")
# Matriz de correlacion con el paquete Hmisc
tcor <- rcorr(as.matrix(df),type = "pearson")
tcor
tcor <- rcorr(as.matrix(df),type = "spearman")
tcor
install.packages("haven")
library(haven)
datos <- read_sav(file.choose())
View(datos)
df <- datos[c(9,8)]
# Diagrama de barras de dos variables categóricas apiladas
library(ggpubr)
# El diagrama de error con el IC de la media de dos factores
ggline(df, x = names(df)[2], y = names(df)[1],
add = c("mean_ci", "jitter"),
palette = "jco")+
ggtitle("Titulo del grafico")
# 2. COrrelación de dos variables Ordinales
library(Hmisc)
m <- rcorr(as.matrix(df), type="spearman")
m
View(datos)
# Seleccionamos las dos variables ordinales
df <- datos[c(8,13)]
View(df)
# Diagramas de error
library(ggplot2)
# Diagrama de barras de dos variables categóricas apiladas
library(ggpubr)
# El diagrama de error con el IC de la media de dos factores
ggline(df, x = names(df)[2], y = names(df)[1],
add = c("mean_ci", "jitter"),
palette = "jco")+
ggtitle("Titulo del grafico")
# Seleccionamos las dos variables ordinales
df <- datos[c(13,8)]
# 1. Descriptiva
# Diagramas de error
library(ggplot2)
# Diagrama de barras de dos variables categóricas apiladas
library(ggpubr)
# El diagrama de error con el IC de la media de dos factores
ggline(df, x = names(df)[2], y = names(df)[1],
add = c("mean_ci", "jitter"),
palette = "jco")+
ggtitle("Titulo del grafico")
m <- cor(as.matrix(df), method="kendall", use="pairwise")
cor.test(unlist(df[,1]),unlist(df[,2]), method="kendall")
