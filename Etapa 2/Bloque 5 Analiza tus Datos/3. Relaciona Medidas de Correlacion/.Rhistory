#********************************************************************
# 1.2 CARGAR PAQUETES O CREAR FUNCIONES
#********************************************************************
# Carga los paquetes sinÃ³ los tienes cargados
lapply(.packages, require, character.only=TRUE)
df <-  data.frame("Palabra"  = c("Temor"),
"Cantidad"  = c(35))
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1
df <-  data.frame("Palabra"  = c("Temor","Desconocimiento"),
"Cantidad"  = c(35,15))
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1
df <-  data.frame("Palabra"  = c("Temor","Desconocimiento"),
"Cantidad"  = c(35,15))
df <-  data.frame(Palabra  = c("Temor","Desconocimiento"),
Cantidad  = c(35,15)
)
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones"),
Cantidad  = c(35,15,15)
)
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,50,25,10,18)
)
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,50,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","jjjjjj","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,50,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","jjjjjj","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,14,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,14,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,45,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,27,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desc","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,27,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,27,25,10,18)
)
wordcloud2(df)
wordcloud2(df,size = 0.5)
df <-  data.frame(Palabra  = c("Temor","Deconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,27,25,10,18)
)
wordcloud2(df,size = 0.5)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,27,25,10,18)
)
wordcloud2(df,size = 0.5)
wordcloud2(df,size = 0.5)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,23,27,25,10,18)
)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,23,27,25,10,18)
)
wordcloud2(df,size = 0.5)
wordcloud2(df,size = 1)
wordcloud2(df,size = .80)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1.5)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,23,32,25,10,18)
)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
wordcloud2(df,size = .70,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(40,23,32,25,10,18)
)
wordcloud2(df,size = .70,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(40,23,32,40,10,18)
)
wordcloud2(df,size = .70,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
# importar datos
datos <- mtcars
# seleccionamos las variables cuantitativas que queramos (mas de dos)
df <- datos[c(1,3,4,5,6,7)]
library("Hmisc")
# Matriz de correlacion con el paquete Hmisc
tcor <- rcorr(as.matrix(df))
tcor
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
library(Hmisc)
tcor<-rcorr(as.matrix(df))
flattenCorrMatrix(tcor$r, tcor$P)
library(corrplot)
# Diagrama de correlaci?n con el paquete corrplot
tcor<-rcorr(as.matrix(df))
corrplot(tcor$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
library(Hmisc)
tcor<-rcorr(as.matrix(df))
flattenCorrMatrix(tcor$r, tcor$P)
# Diagrama de correlaci?n con el paquete corrplot
tcor<-rcorr(as.matrix(df))
corrplot(tcor$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
M <- cor(mtcars)
set.seed(0)
##  different color series
col1 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "white",
"cyan", "#007FFF", "blue","#00007F"))
col2 <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#4393C3", "#2166AC", "#053061"))
col3 <- colorRampPalette(c("red", "white", "blue"))
col4 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "#7FFF7F",
"cyan", "#007FFF", "blue", "#00007F"))
wb <- c("white", "black")
par(ask = TRUE)
## different color scale and methods to display corr-matrix
corrplot(M, method = "number", col = "black", cl.pos = "n")
corrplot(M, method = "number")
flattenCorrMatrix(tcor$r, tcor$P)
#********************************************************************
# 1.1 INSTALAR PAQUETES DE FUNCIONES
#********************************************************************
# Lista de paquetes de funciones a instalar
.packages = c("plotly","ggplot2", "plotly", "xlsx","scales","stringr","readr","dplyr","psych","readxl","ggpubr","PerformanceAnalytics")
.packages %in% installed.packages()
##
# Instala los paquetes sinÃ³ los tienes instalados
##
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
#********************************************************************
# 1.2 CARGAR PAQUETES O CREAR FUNCIONES
#********************************************************************
# Carga los paquetes sinÃ³ los tienes cargados
lapply(.packages, require, character.only=TRUE)
###
# Hoja de Trabajo de Correlaci?n
###
setwd("~/Analiza tus Datos/Bloque 2/Bloque 4 Describe tus datos/3. Describe la Correlacion")
setwd("~/Analiza tus Datos/Etapa 2/2. Define tu plan de accion en 7 dias")
df <- read_excel("espalda.xlsx")
setwd("~/Analiza tus Datos/Etapa 2/Bloque 4 Describe tus datos/3. Describe la Correlacion")
df <- read_excel("espalda.xlsx")
df$diff_odi <- df$`ODI Mes0` - df$`ODI Mes1` #diff_odi es mejoria
df$NHD[df$NHD == 2] <- 1
df$LC[df$LC == 2] <- 1
df <- df[-1] # Quito la columna de id del paciente
cconti <- df[,c(2,3,4,5,7,10,11)]
#Diagrama de Corrleacion que coloca SCATTERPLOT, HISTOGRAMAS Y COEF CORRELACION..
chart.Correlation(cconti,histogram = TRUE,pch=19,method = "spearman")
cconti <- df[,c(2,5,7,10,11)]
## Matrix Plot Agrupado por Factor de Hernias Discales LumboCiatica
cconti$LC <- as.factor(cconti$LC)
pairs(cconti, data=cconti,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, main="Matrix Plot por Lumbociatica", col=c("green","red")[cconti$LC])
legend("topright",as.vector(unique(cconti$LC)),fill=c("green","red"))
## Matrix Plot Agrupado por Factor de Hernias Discales NHD
cconti$NHD <- as.factor(cconti$NHD)
pairs(cconti, data=cconti,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, main="Matrix Plot por Num de Hernias", col=c("green","red")[cconti$NHD])
legend("topright",as.vector(unique(cconti$NHD)),fill=c("green","red"))
# Seguna opci?n para costumizar el matrixplot solo muestra
# upperpanel del scatter plot y dentro del scatter
# coloca el indice de correlacion
upper.panel<-function(x, y){
points(x,y, pch=23)
r <- round(cor(x, y), digits=2)
txt <- paste0("R = ", r)
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
text(0.5, 0.9, txt)
}
# Plot #2: same as above, but add loess smoother in lower and correlation in upper
pairs(cconti, data=cconti,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, main="Matrix Plot Mixto")
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
#Diagrama de Corrleacion que coloca SCATTERPLOT, HISTOGRAMAS Y COEF CORRELACION..
chart.Correlation(cconti,histogram = TRUE,pch=19,method = "spearman")
# crear el matrixplot
pairs(df,
upper.panel = upper.panel)
df$diff_odi <- df$`ODI Mes0` - df$`ODI Mes1` #diff_odi es mejoria
df$NHD[df$NHD == 2] <- 1
df$LC[df$LC == 2] <- 1
df <- df[-1] # Quito la columna de id del paciente
cconti <- df[,c(2,3,4,5,7,10,11)]
#Diagrama de Corrleacion que coloca SCATTERPLOT, HISTOGRAMAS Y COEF CORRELACION..
chart.Correlation(cconti,histogram = TRUE,pch=19,method = "spearman")
# Plot #2: same as above, but add loess smoother in lower and correlation in upper
pairs(cconti, data=cconti,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, main="Matrix Plot Mixto")
## Matrix Plot Agrupado por Factor de Hernias Discales LumboCiatica
cconti$LC <- as.factor(cconti$LC)
pairs(cconti, data=cconti,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, main="Matrix Plot por Lumbociatica", col=c("green","red")[cconti$LC])
#Matrix de Correlacion
rel <-  cor(cconti)
#Matrix de Correlacion
rel <-  cor(cconti)
cconti <- df[,c(2,5,7,10,11)]
## Matrix Plot Agrupado por Factor de Hernias Discales LumboCiatica
cconti$LC <- as.factor(cconti$LC)
cconti <- df[,c(2,5,7,10,11)]
df$diff_odi <- df$`ODI Mes0` - df$`ODI Mes1` #diff_odi es mejoria
df$NHD[df$NHD == 2] <- 1
df$LC[df$LC == 2] <- 1
df <- df[-1] # Quito la columna de id del paciente
cconti <- df[,c(2,3,4,5,7,10,11)]
df <- read_excel("espalda.xlsx")
df$diff_odi <- df$`ODI Mes0` - df$`ODI Mes1` #diff_odi es mejoria
df$NHD[df$NHD == 2] <- 1
df$LC[df$LC == 2] <- 1
df <- df[-1] # Quito la columna de id del paciente
cconti <- df[,c(2,3,4,5,7,10,11)]
#Diagrama de Corrleacion que coloca SCATTERPLOT, HISTOGRAMAS Y COEF CORRELACION..
chart.Correlation(cconti,histogram = TRUE,pch=19,method = "spearman")
cconti <- df[,c(2,5,7,10,11)]
## Matrix Plot Agrupado por Factor de Hernias Discales LumboCiatica
cconti$LC <- as.factor(cconti$LC)
pairs(cconti, data=cconti,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, main="Matrix Plot por Lumbociatica", col=c("green","red")[cconti$LC])
legend("topright",as.vector(unique(cconti$LC)),fill=c("green","red"))
## Matrix Plot Agrupado por Factor de Hernias Discales NHD
cconti$NHD <- as.factor(cconti$NHD)
pairs(cconti, data=cconti,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, main="Matrix Plot por Num de Hernias", col=c("green","red")[cconti$NHD])
#Matrix de Correlacion
rel <-  cor(cconti)
View(cconti)
##Matriz de Correlaci?n usando la liberaria Hmisc
install.packages("Hmisc")
install.packages("Hmisc")
library("Hmisc")
res2 <- rcorr(as.matrix(cconti))
resmatrix <-  as.matrix(res2$r)
pvalues <- as.matrix(res2$P)
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
fpanel <- flattenCorrMatrix(resmatrix, pvalues)
View(fpanel)
.packages = c("lme4","lmerTest", "FSA","car","plotly","ggplot2", "plotly", "xlsx","scales","stringr","readr","dplyr","psych","readxl","ggpubr","PerformanceAnalytics")
.packages %in% installed.packages()
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
descriptiva <-  function(Datos,columnas,colagruparpor) {
filtrar_por <-  unique(Datos[,colagruparpor])
listaout <- list()
for (g in (1:nrow(filtrar_por)))
{
if (is.list(filtrar_por[g,1]))
{
df <-   filter(Datos, (Datos[,colagruparpor] %in% (filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
} else
{
df <-   filter(Datos, (Datos[,colagruparpor] == str_trim(filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
}
for (i in (2:ncol(df)))
{
lista <- list(
Grupo = str_trim(filtrar_por[g,1]),
media =   format(apply(df[,i],2,mean),nsmall=1,big.mark = ","),
cutmedia =    format(apply(df[,i],2,mean,trim=0.05),nsmall=1,big.mark = ","),
StdErr   =    format(apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length)),nsmall=1,big.mark = ","),
IC95LimInf =  format(apply(df[,i],2,mean) - (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
IC95LimSup =  format(apply(df[,i],2,mean) + (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
mediana=   format(apply(df[,i],2,median),nsmall=1,big.mark = ","),
sd=    format(apply(df[,i],2,sd),nsmall=1,big.mark = ","),
var =   format(apply(df[,i],2,var),nsmall=1,big.mark = ","),
obs =   apply(df[,i],2,length),
Min =   format(apply(df[,i],2,min),nsmall=1,big.mark =","),
Max=    format(apply(df[,i],2,max),nsmall=1,big.mark = ","),
Rango =   format(apply(df[,i],2,max) -  apply(df[,i],2,min),nsmall = 1,big.mark = ","),
RangoIQR =  format( apply(df[,i],2,quantile,prob=0.75) - apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q1=   format(apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q3=   format(apply(df[,i],2,quantile,prob=0.75),nsmall = 1, big.mark = ","),
skew=    round(apply(df[,i],2,skew),2),
kurtosis =   round(apply(df[,i],2, kurtosi))
)
listaout[[str_trim(filtrar_por[g,1])]] <- lista
}
}
#Colocando Nombres a las Columnas y Filas a la matriz estadistica descriptiva
mt <- matrix(ncol = nrow(filtrar_por), nrow = 18 )
colnames(mt) <- names(listaout)
rownames(mt) <- names(listaout[[1]])
for (i in names(listaout))
{
mt[,i] <- unlist(listaout[[i]])
}
mt
}
crea_errdiagram <- function(Datos,columna,agrupapor,titulo="Titulo",xlabel="xlabel",ylabel="ylabel",var_color ="NA"){
dfsumarize <- Datos %>%
group_by(get(agrupapor),get(var_color)) %>%
summarise(sderr = sd(get(columna),na.rm = TRUE)/sqrt(n()),
media = mean(get(columna)))
pd <- position_dodge(0.5) #Es para que las barras de error no se overlapen y se espacien horizontalmente
ggplot(dfsumarize, aes(x=`get(var_color)`, y=media,color=`get(var_color)`,group=1)) +
geom_errorbar( aes(ymin=media-1.96*sderr,ymax=media + 1.96*sderr),width = 0.2,position =pd) +
facet_wrap(~`get(agrupapor)`)+
geom_point(position=pd)+
geom_line(position = pd)+
labs(title = titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold"))
}
creaboxplot <- function(Datos, var_x,var_y,Titulo,xlabel="NA",ylabel="NA",var_color="NA"){
ggplot(data = Datos) +
geom_boxplot(mapping = aes(
x = reorder(get(var_x),get(var_y),FUN = median),
y = get(var_y),
fill=get(var_color)
)) +
#geom_jitter(mapping = aes(x=get(var_x),y=get(var_y),color=get(var_color)) ,position=position_jitter(0.2))+
labs(title = Titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold"))
}
creascatplot <- function(Datos, var_x,var_y,Titulo,xlabel,ylabel="NA",categoria="group"){
ggplot(data = Datos) +
geom_point(mapping = aes(x = get(var_x), y = get(var_y),color=get(categoria))) +
labs(title = Titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold")) +
geom_smooth(mapping = aes(x = get(var_x), y = get(var_y)), orientation = "y")
#  facet_grid(. ~ get(categoria))
}
creagrafcorr <-  function(Datos,colx,coly,title,etiquetax,etiquetay,grupo=NA)  {
ggscatter(Datos, x = colx, y = coly,
color = ifelse(is.na(grupo),"black",grupo), shape = 21, size = 3,
fill = ifelse(is.na(grupo),"lightgray",grupo),
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
facet.by = ifelse(is.na(grupo),NA,grupo),
title = title,
xlab =  etiquetax,
ylab =  etiquetay,
add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
conf.int = TRUE,
cor.coef = TRUE,
show.legend.text = TRUE,
cor.coeff.args = list(method = "pearson", label.x.npc = "left", label.y.npc = "top", label.sep = "\n")
) +
stat_regline_equation(label.x.npc = "left",label.y.npc = "top",output.type = "expression", inherit.aes = TRUE)
}
setwd("~/Analiza tus Datos/Etapa 2/Bloque 5 Analiza tus Datos/3. Relaciona Medidas de Correlacion")
####
# Cargo la data
####
setwd("~/Analiza tus Datos/Etapa 2/Bloque 5 Analiza tus Datos/3. Relaciona Medidas de Correlacion")
df <- read_excel("espalda.xlsx")
df <- df[,c(3,4,8)]
warinings()
warnings()
df
df <- df[,c(3,4,9)]
df <- df[,c(3,4,9)]
df <- df[,c(3,4,9)]
df <- read_excel("espalda.xlsx")
df <- df[,c(3,4,9)]
df
df <- read_excel("espalda.xlsx")
df <- df[,c(4,5,9)] #Selecciono
df
pairs.panels(df, scale=TRUE)
pairs.panels(df)
# Graficamos Matrix Plot para ver Coeficiente de Correlacion
pairs.panels(df,method = "pearson")
# Graficamos Matrix Plot para ver Coeficiente de Correlacion  PEARSON
pairs.panels(df,method = "spearman")
# Graficamos Matrix Plot para ver Coeficiente de Correlacion  PEARSON
pairs.panels(df,method = "spearman",main="oo")
# Graficamos Matrix Plot para ver Coeficiente de Correlacion  PEARSON
pairs.panels(df,method = "pearson",main="Coeficiente Pearson")
# Graficamos Matrix Plot para ver Coeficiente de Correlacion  Spearman
pairs.panels(df,method = "spearman",main="Coeficiente Spearman")
###
# Se muestran las matrices de correlacion y p-valor
##
mtcorPearson <- rcorr(df,type = "pearson")
###
# Se muestran las matrices de correlacion y p-valor
##
mtcorPearson <- rcorr(as.matrix(df),type = "pearson")
mtcorPearson
mtcorSpearman <- rcorr(as.matrix(df),type = "spearman") ##Spearman
mtcorSpearman
##Valido la Normalidad de las Variables par decidir si me quedo con Pearson o Spearman
shapiro.test(df$Peso)
##Valido la Normalidad de las Variables par decidir si me quedo con Pearson o Spearman
shapiro.test(df$Altura)
##Valido la Normalidad de las Variables par decidir si me quedo con Pearson o Spearman
shapiro.test(df$OdiMes0)
##Valido la Normalidad de las Variables par decidir si me quedo con Pearson o Spearman
shapiro.test(df$`ODI Mes0`)
##Valido la Normalidad de las Variables par decidir si me quedo con Pearson o Spearman
shapiro.test(df$Peso)
mtcorSpearman
flattenCorrMatrix(mtcorPearson$r, mtcorPearson2$P)
flattenCorrMatrix(mtcorPearson$r, mtcorPearson$P)
#Matriz de Correlacion y Pvalor  en forma de tabla "Spearman"
flattenCorrMatrix(mtcorSpearman$r,mtcorSpearman$P)
#Matrix de Correlacion y Pvalor en forma de tabla "PEARSON"
flattenCorrMatrix(mtcorPearson$r, mtcorPearson$P)
Matriz de Correlacion y Pvalor  en forma de tabla "Spearman"
flattenCorrMatrix(mtcorSpearman$r,mtcorSpearman$P)
#Matrix de Correlacion y Pvalor en forma de tabla "PEARSON"
flattenCorrMatrix(mtcorPearson$r, mtcorPearson$P)
#Matriz de Correlacion y Pvalor  en forma de tabla "Spearman"
flattenCorrMatrix(mtcorSpearman$r,mtcorSpearman$P)
##Valido la Normalidad  PESO de las Variables par decidir si me quedo con Pearson o Spearman
shapiro.test(df$Peso)
##Valido la Normalidad  ALTURA de las Variables par decidir si me quedo con Pearson o Spearman
shapiro.test(df$Altura)
