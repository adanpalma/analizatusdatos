df <-  data.frame("Palabra"  = c("Temor","Desconocimiento"),
"Cantidad"  = c(35,15))
df <-  data.frame(Palabra  = c("Temor","Desconocimiento"),
Cantidad  = c(35,15)
)
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones"),
Cantidad  = c(35,15,15)
)
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,50,25,10,18)
)
wordcloud2(df, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,50,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","jjjjjj","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,50,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","jjjjjj","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,14,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,14,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,45,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,27,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Desc","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,15,27,25,10,18)
)
wordcloud2(df)
df <-  data.frame(Palabra  = c("Temor","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,27,25,10,18)
)
wordcloud2(df)
wordcloud2(df,size = 0.5)
df <-  data.frame(Palabra  = c("Temor","Deconocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,27,25,10,18)
)
wordcloud2(df,size = 0.5)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,27,25,10,18)
)
wordcloud2(df,size = 0.5)
wordcloud2(df,size = 0.5)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,23,27,25,10,18)
)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,23,27,25,10,18)
)
wordcloud2(df,size = 0.5)
wordcloud2(df,size = 1)
wordcloud2(df,size = .80)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1.5)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(35,23,32,25,10,18)
)
wordcloud2(df,size = .80,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
wordcloud2(df,size = .70,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(40,23,32,25,10,18)
)
wordcloud2(df,size = .70,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
df <-  data.frame(Palabra  = c("Temor","Conocimiento","Repercusiones","Desinterés","Solución Interna","Capacitacion"),
Cantidad  = c(40,23,32,40,10,18)
)
wordcloud2(df,size = .70,minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = .75)
# Lista de paquetes de funciones a instalar
.packages = c("Hmisc","lme4","lmerTest", "FSA","car","plotly","ggplot2", "plotly", "xlsx","scales","stringr","readr","dplyr","psych","readxl","ggpubr","PerformanceAnalytics")
.packages %in% installed.packages()
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
descriptiva <-  function(Datos,columnas,colagruparpor) {
filtrar_por <-  unique(Datos[,colagruparpor])
listaout <- list()
for (g in (1:nrow(filtrar_por)))
{
if (is.list(filtrar_por[g,1]))
{
df <-   filter(Datos, (Datos[,colagruparpor] %in% (filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
} else
{
df <-   filter(Datos, (Datos[,colagruparpor] == str_trim(filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
}
for (i in (2:ncol(df)))
{
lista <- list(
Grupo = str_trim(filtrar_por[g,1]),
media =   format(apply(df[,i],2,mean),nsmall=1,big.mark = ","),
cutmedia =    format(apply(df[,i],2,mean,trim=0.05),nsmall=1,big.mark = ","),
StdErr   =    format(apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length)),nsmall=1,big.mark = ","),
IC95LimInf =  format(apply(df[,i],2,mean) - (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
IC95LimSup =  format(apply(df[,i],2,mean) + (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
mediana=   format(apply(df[,i],2,median),nsmall=1,big.mark = ","),
sd=    format(apply(df[,i],2,sd),nsmall=1,big.mark = ","),
var =   format(apply(df[,i],2,var),nsmall=1,big.mark = ","),
obs =   apply(df[,i],2,length),
Min =   format(apply(df[,i],2,min),nsmall=1,big.mark =","),
Max=    format(apply(df[,i],2,max),nsmall=1,big.mark = ","),
Rango =   format(apply(df[,i],2,max) -  apply(df[,i],2,min),nsmall = 1,big.mark = ","),
RangoIQR =  format( apply(df[,i],2,quantile,prob=0.75) - apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q1=   format(apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q3=   format(apply(df[,i],2,quantile,prob=0.75),nsmall = 1, big.mark = ","),
skew=    round(apply(df[,i],2,skew),2),
kurtosis =   round(apply(df[,i],2, kurtosi))
)
listaout[[str_trim(filtrar_por[g,1])]] <- lista
}
}
#Colocando Nombres a las Columnas y Filas a la matriz estadistica descriptiva
mt <- matrix(ncol = nrow(filtrar_por), nrow = 18 )
colnames(mt) <- names(listaout)
rownames(mt) <- names(listaout[[1]])
for (i in names(listaout))
{
mt[,i] <- unlist(listaout[[i]])
}
mt
}
crea_errdiagram <- function(Datos,columna,agrupapor,titulo="Titulo",xlabel="xlabel",ylabel="ylabel",var_color ="NA"){
dfsumarize <- Datos %>%
group_by(get(agrupapor),get(var_color)) %>%
summarise(sderr = sd(get(columna),na.rm = TRUE)/sqrt(n()),
media = mean(get(columna)))
pd <- position_dodge(0.5) #Es para que las barras de error no se overlapen y se espacien horizontalmente
ggplot(dfsumarize, aes(x=`get(var_color)`, y=media,color=`get(var_color)`,group=1)) +
geom_errorbar( aes(ymin=media-1.96*sderr,ymax=media + 1.96*sderr),width = 0.2,position =pd) +
facet_wrap(~`get(agrupapor)`)+
geom_point(position=pd)+
geom_line(position = pd)+
labs(title = titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold"))
}
creaboxplot <- function(Datos, var_x,var_y,Titulo,xlabel="NA",ylabel="NA",var_color="NA"){
ggplot(data = Datos) +
geom_boxplot(mapping = aes(
x = reorder(get(var_x),get(var_y),FUN = median),
y = get(var_y),
fill=get(var_color)
)) +
#geom_jitter(mapping = aes(x=get(var_x),y=get(var_y),color=get(var_color)) ,position=position_jitter(0.2))+
labs(title = Titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold"))
}
creascatplot <- function(Datos, var_x,var_y,Titulo,xlabel,ylabel="NA",categoria="group"){
ggplot(data = Datos) +
geom_point(mapping = aes(x = get(var_x), y = get(var_y),color=get(categoria))) +
labs(title = Titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold")) +
geom_smooth(mapping = aes(x = get(var_x), y = get(var_y)), orientation = "y")
#  facet_grid(. ~ get(categoria))
}
creagrafcorr <-  function(Datos,colx,coly,title,etiquetax,etiquetay,grupo=NA)  {
ggscatter(Datos, x = colx, y = coly,
color = ifelse(is.na(grupo),"black",grupo), shape = 21, size = 3,
fill = ifelse(is.na(grupo),"lightgray",grupo),
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
facet.by = ifelse(is.na(grupo),NA,grupo),
title = title,
xlab =  etiquetax,
ylab =  etiquetay,
add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
conf.int = TRUE,
cor.coef = TRUE,
show.legend.text = TRUE,
cor.coeff.args = list(method = "pearson", label.x.npc = "left", label.y.npc = "top", label.sep = "\n")
) +
stat_regline_equation(label.x.npc = "left",label.y.npc = "top",output.type = "expression", inherit.aes = TRUE)
}
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
setwd("~/Analiza tus Datos/Etapa 2/Bloque 5 Analiza tus Datos/4. Comparar Proporciones")
###
# Seteo el Directorio....
##
setwd("~/Analiza tus Datos/Etapa 2/Bloque 5 Analiza tus Datos/4. Comparar Proporciones")
####
# Cargo la data
####
df <- read_excel("espalda.xlsx")
###
# Seteo el Directorio....
##
setwd("~/Analiza tus Datos/Etapa 2/Bloque 5 Analiza tus Datos/4. Comparar Proporciones")
#********************************************************************
# 1.1 INSTALAR PAQUETES DE FUNCIONES
#********************************************************************
# Lista de paquetes de funciones a instalar
.packages = c("foreign","Hmisc","lme4","lmerTest", "FSA","car","plotly","ggplot2", "plotly", "xlsx","scales","stringr","readr","dplyr","psych","readxl","ggpubr","PerformanceAnalytics")
.packages %in% installed.packages()
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
##
# Se definen funciones
##
descriptiva <-  function(Datos,columnas,colagruparpor) {
filtrar_por <-  unique(Datos[,colagruparpor])
listaout <- list()
for (g in (1:nrow(filtrar_por)))
{
if (is.list(filtrar_por[g,1]))
{
df <-   filter(Datos, (Datos[,colagruparpor] %in% (filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
} else
{
df <-   filter(Datos, (Datos[,colagruparpor] == str_trim(filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
}
for (i in (2:ncol(df)))
{
lista <- list(
Grupo = str_trim(filtrar_por[g,1]),
media =   format(apply(df[,i],2,mean),nsmall=1,big.mark = ","),
cutmedia =    format(apply(df[,i],2,mean,trim=0.05),nsmall=1,big.mark = ","),
StdErr   =    format(apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length)),nsmall=1,big.mark = ","),
IC95LimInf =  format(apply(df[,i],2,mean) - (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
IC95LimSup =  format(apply(df[,i],2,mean) + (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
mediana=   format(apply(df[,i],2,median),nsmall=1,big.mark = ","),
sd=    format(apply(df[,i],2,sd),nsmall=1,big.mark = ","),
var =   format(apply(df[,i],2,var),nsmall=1,big.mark = ","),
obs =   apply(df[,i],2,length),
Min =   format(apply(df[,i],2,min),nsmall=1,big.mark =","),
Max=    format(apply(df[,i],2,max),nsmall=1,big.mark = ","),
Rango =   format(apply(df[,i],2,max) -  apply(df[,i],2,min),nsmall = 1,big.mark = ","),
RangoIQR =  format( apply(df[,i],2,quantile,prob=0.75) - apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q1=   format(apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q3=   format(apply(df[,i],2,quantile,prob=0.75),nsmall = 1, big.mark = ","),
skew=    round(apply(df[,i],2,skew),2),
kurtosis =   round(apply(df[,i],2, kurtosi))
)
listaout[[str_trim(filtrar_por[g,1])]] <- lista
}
}
#Colocando Nombres a las Columnas y Filas a la matriz estadistica descriptiva
mt <- matrix(ncol = nrow(filtrar_por), nrow = 18 )
colnames(mt) <- names(listaout)
rownames(mt) <- names(listaout[[1]])
for (i in names(listaout))
{
mt[,i] <- unlist(listaout[[i]])
}
mt
}
###
# Seteo el Directorio....
##
setwd("~/Analiza tus Datos/Etapa 2/Bloque 5 Analiza tus Datos/4. Comparar Proporciones")
####
# Cargo la data dn formato SPSS y la conveirto a Data Frame\
# SPSS
####
df < read.spss("datos-espalda.sav",to.data.frame = TRUE)
View(df)
####
# Cargo la data dn formato SPSS y la conveirto a Data Frame\
# SPSS
####
df < read.spss("datos-espalda.sav",to.data.frame = TRUE)
####
# Cargo la data dn formato SPSS y la conveirto a Data Frame\
# SPSS
####
library(foreign)
df < read.spss("datos-espalda.sav",to.data.frame = TRUE)
df < read.spss(file.choose(),to.data.frame = TRUE)
df < read.spss(file.choose())
install.packages("readspss")
####
# Cargo la data dn formato SPSS y la conveirto a Data Frame\
# SPSS
####
library(readspss)
####
# Cargo la data dn formato SPSS y la conveirto a Data Frame\
# SPSS
####
install.packages("readspss")
####
# Cargo la data dn formato SPSS y la conveirto a Data Frame\
# SPSS
####
library(foreign)
df < read.spss(file.choose(), to.data.frame = TRUE)
####
# Cargo la data dn formato SPSS y la conveirto a Data Frame\
# SPSS
####
library(heaven)
install.packages("heaven")
####
# Cargo la data dn formato SPSS y la conveirto a Data Frame\
# SPSS
####
install.packages("haven")
install.packages("haven")
library(heaven)
library(haven)
df < read_sav("datos-espalada.sav", to.data.frame = TRUE)
df < read_sav("datos-espalada.sav")
###
# Seteo el Directorio....
##
setwd("~/Analiza tus Datos/Etapa 2/Bloque 5 Analiza tus Datos/4. Comparar Proporciones")
df < read_sav("datos-espalada.sav")
df < read_sav("datos-espalda.sav")
####
# Cargo la data dn formato SPSS y la conveirto a Data Frame\
# SPSS
####
library(foreign)
df <- read.spss(file.choose(),to.data.frame = TRUE)
View(df)
tab_cont_lfc <- table(df[,c(13,11)])
tab_cont_lfc
tab_cont_lfc0 <- table(df[,c(13,11)])
dftabcontlfc0 <- data.frame(tab_cont_lfc0)
View(dftabcontlfc0)
df[,c(13,11)]
table(df[,c(13,11)])
colnames(dftabcontlfc0) <- c("Nivel","Grupo","Frec")
View(dftabcontlfc0)
df[,c(13,11)]
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
M
tab_cont_lfc0 <- table(df[,c(13,11)])
tab_cont_lfc0
chisq.test(tab_cont_lfc0)
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
M
tab_cont_lfc0 <- as.table(table(df[,c(13,11)]))
tab_cont_lfc0
chisq.test(tab_cont_lfc0)
rbind(c(762, 327, 468), c(484, 239, 477))
df[,c(13,11)]
tab_cont_lfc0 <- table(df$LF_Mes0,df$Grupo)
tab_cont_lfc0
tab_cont_lfc0 <- as.table(df$LF_Mes0,df$Grupo)
tab_cont_lfc0 <- rbind(df$LF_Mes0,df$Grupo)
tab_cont_lfc0
df$LF_Mes0
df$Grupo
tab_cont_lfc0 <- rbind(c(df$LF_Mes0,df$Grupo))
tab_cont_lfc0
df$LF_Mes0,
df$LF_Mes0
tab_cont_lfc0 <- table(df[,c(13,11)])
dftabcontlfc0 <- data.frame(tab_cont_lfc0)
colnames(dftabcontlfc0) <- c("Nivel","Grupo","Frec")
dftabcontlfc0
tab_cont_lfc1 <- table(df[,c(14,11)])
tab_cont_lfc1 <- table(df[,c(14,11)])
dftabcontlfc1 <- data.frame(tab_cont_lfc0)
colnames(dftabcontlfc1) <- c("Nivel","Grupo","Frec")
view(dftabcontlfc1)
View(dftabcontlfc1)
tab_cont_lfc1 <- table(df[,c(14,11)])
dftabcontlfc1 <- data.frame(tab_cont_lfc1)
colnames(dftabcontlfc1) <- c("Nivel","Grupo","Frec")
View(dftabcontlfc1)
name1 = names(df)[14]
name1
dftabcontlfc1
name1 = names(dftabcontlfc1)[1]
name2 = names(dftabcontlfc1)[2]
name1 = names(df)[14]
name2 = names(df)[11]
p <- ggplot(df,mapping=aes(df[,name1],..count..)) +
geom_bar(aes=(fill=df[,name2]))
.packages = c("foreing","Hmisc","lme4","lmerTest", "FSA","car","plotly","ggplot2", "plotly", "xlsx","scales","stringr","readr","dplyr","psych","readxl","ggpubr","PerformanceAnalytics")
.packages %in% installed.packages()
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
p <- ggplot(df,mapping=aes(df[,name1],..count..)) +
geom_bar(aes=(fill=df[,name2]))
p
p <- ggplot(df,mapping=aes(df[,name1],..count..)) +
geom_bar(aes=(fill=df[,name2]),position = "dogde")
rlang::last_error()
p <- ggplot(df,mapping=aes(df[,name1],..count..)) +
geom_bar(aes=(fill=df[,name2]),position = position_dodge())
p
p <- ggplot(df,mapping=aes(df[,name1],..count..)) +
geom_bar(aes(fill=df[,name2]),position = position_dodge())
p
p <- ggplot(df,mapping=aes(df[,name1],..count..)) +
geom_bar(aes(fill=df[,name2]),position = position_stack())
p
p <- ggplot(df,mapping=aes(df[,name1],..count..)) +
geom_bar(aes(fill=df[,name2]),position = position_stack()) +
xlab(name1) + ylab("Frecuencia Absoluta")+
ggtitle(paste(c("Diagrama de Barras",name1)))
p
name1
p <- ggplot(df,mapping=aes(df[,name1],..count..)) +
geom_bar(aes(fill=df[,name2]),position = position_stack()) +
xlab(name1) + ylab("Frecuencia Absoluta")+
ggtitle(paste(c("Diagrama de Barras ",name1)))
p
p <- ggplot(df,mapping=aes(df[,name1],..count..)) +
geom_bar(aes(fill=df[,name2]),position = position_stack()) +
xlab(name1) + ylab("Frecuencia Absoluta")+
ggtitle(paste("Diagrama de Barras ",name1))
p
p <- ggplot(df,mapping=aes(df[,name1],..count..)) +
geom_bar(aes(fill=df[,name2]),position = position_stack()) +
xlab(name1) + ylab("Frecuencia Absoluta")+
ggtitle(paste("Diagrama de Barras ",name1))+
guides(fill=guide_legend(title=""))
p
chisq <- chisq.test(x=df$LF_Mes1,y=df$Grupo,correct = FALSE)
df$LF_Mes1
typeof(df$LF_Mes1)
chisq <- chisq.test(x=as.vector(df$LF_Mes1),y=as.vector(df$Grupo),correct = FALSE)
chisq
## Crear la tabla de contingencias para lf_mes0 vs grupo
df[,c(14,11)]
chisq <- chisq.test(x=as.vector(df[,14]),y=as.vector(df[,11]),correct = FALSE)
chisq
###continuar con el calculo del chiq.test para determinar via el test de
### chi cuadrado si hay o no diferencias significativa en las proporciones
chisq <- chisq.test(x=as.vector(df[,14]),y=as.vector(df[,11]),correct = FALSE)
chisq
as.vector(df[,14])
as.vector(df[,11])
###continuar con el calculo del chiq.test para determinar via el test de
### chi cuadrado si hay o no diferencias significativa en las proporciones
chisq <- chisq.test(x=as.vector(df[,14]),y=as.vector(df[,11]),correct = FALSE)
chisq
fisher.test(x=as.vector(df[,14]),y=as.vector(df[,11]),correct = FALSE)
fisher.test(x=as.vector(df[,14]),y=as.vector(df[,11]))
###continuar con el calculo del chiq.test para determinar via el test de
### chi cuadrado si hay o no diferencias significativa en las proporciones
chisq <- chisq.test(x=as.vector(df[,14]),y=as.vector(df[,11]),correct = FALSE)
chisq
#Cuando los datos el chi cuadrado  da un p valor pero con un warining
#es porque posiblemente los valores esperados son muy chicos y como
# chi cuadrado espera datos normales, y no lo son genera ese waring
#en tales caso puedes confirmar con fisher.test
fisher.test(x=as.vector(df[,14]),y=as.vector(df[,11]))
# PROCEDO A VER EL P-VALOR POR CADA UNA DE LAS FILAS DE LA VARIABLE LF_MES1
prop.test(x=c(0,24),n=c(101,99)) # MINIMA
prop.test(x=c(23,64),n=c(101,99)) # MODERADA
prop.test(x=c(51,11),n=c(101,99)) # INTENSA
prop.test(x=c(25,0),n=c(101,99)) # DISCAPACIDAD
prop.test(x=c(2,0),n=c(101,99)) # MAXIMA
