rowSel <- df[2]=="versicolor"|df[2]=="virginica"
# df filtrado
df = df[rowSel,]
library(plotly)
# Boxplot con puntos con plotly
name1 <- names(df)[1]
name2 <- names(df)[2]
df[,name1]
x = df[,name2], type
df[,name2]
# BoxPlot por grupo de tratamiento para la variable continua Mejoria
# Boxplot con puntos con plotly
name1 <-  names(df)[12]
# BoxPlot por grupo de tratamiento para la variable continua Mejoria
# Boxplot con puntos con plotly
name1 <-  names(df)[12]
df <- espalda <- read_excel("espalda.xlsx")
###
# Preparo datos, creo columnas, grupos etc
###
df$diffodi  <- df$`ODI Mes0` - df$`ODI Mes1` # agrego  variable con la mejoria
df$NHD[df$NHD > 0] <- 1 # si tiene mas de 1 hernia las hago todas 1 eso indica que tiene hernias
#creo factores
df$NHD <- factor(df$NHD,labels  = c("Sin Hernia","Con Hernia")) #Hernias
# BoxPlot por grupo de tratamiento para la variable continua Mejoria
# Boxplot con puntos con plotly
name1 <-  names(df)[12]
name2 <-  names(df)[11]
df[,name1]
df[,'Grupo']
plot_ly(y = df[,name1], x = df[,'Grupo'], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relaci?n al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
plot_ly(y = pull(df[,name1]), x = df[,'Grupo'], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relaci?n al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
df$Grupo <- factor(df$Grupo,labels = c("Convencional","Experimental")) #Tipo de tratamiento
plot_ly(y = pull(df[,name1]), x = df[,'Grupo'], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relaci?n al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
plot_ly(y = pull(df[,name1]), x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relaci?n al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
# importar datos
datos = iris
# seleccionamos una variable cuantativa y un factor
df <- iris[c(1,5)]
library(plotly)
# Boxplot con puntos con plotly
name1 <- names(df)[1]
name2 <- names(df)[2]
plot_ly(y = df[,name1], x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relaci?n al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
df <- espalda <- read_excel("espalda.xlsx")
###
# Preparo datos, creo columnas, grupos etc
###
df$diffodi  <- df$`ODI Mes0` - df$`ODI Mes1` # agrego  variable con la mejoria
df$NHD[df$NHD > 0] <- 1 # si tiene mas de 1 hernia las hago todas 1 eso indica que tiene hernias
#creo factores
df$NHD <- factor(df$NHD,labels  = c("Sin Hernia","Con Hernia")) #Hernias
df$Grupo <- factor(df$Grupo,labels = c("Convencional","Experimental")) #Tipo de tratamiento
plot_ly(y = pull(df[,name1]), x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relaci?n al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
# BoxPlot por grupo de tratamiento para la variable continua Mejoria
# Boxplot con puntos con plotly
name1 <-  names(df)[12]
name2 <-  names(df)[11]
plot_ly(y = pull(df[,name1]), x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relaci?n al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
creaboxplot <- function(Datos, var_x,var_y,Titulo,xlabel="NA",ylabel="NA"){
ggplot(data = Datos) +
geom_boxplot(mapping = aes(
x = reorder(get(var_x),get(var_y),FUN = median),
y = get(var_y),fill=get(var_x)
)) +
labs(title = Titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold"))
}
View(creaboxplot)
creaboxplot(df,name2,name1)
creaboxplot(df,name2,name1,"Box Plot por Tratamiento","Mejoria","Tratamiento")
plot_ly(y = pull(df[,name1]), x = df[,name2], type = "box",name = name1, boxpoints = "all")%>%
layout(title = paste("Boxplot de",name1, "en relaci?n al grupo ",name2),yaxis = list(title = name1),xaxis = list(title = name2))
creaboxplot <- function(Datos, var_x,var_y,Titulo,xlabel="NA",ylabel="NA"){
ggplot(data = Datos) +
geom_boxplot(mapping = aes(
x = reorder(get(var_x),get(var_y),FUN = median),
y = get(var_y),fill=get(var_x)
)) +
geom_jitter(position=position_jitter(0.2))+
labs(title = Titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold"))
}
creaboxplot(df,name2,name1,"Box Plot por Tratamiento","Mejoria","Tratamiento")
ggplot(data = Datos) +
geom_boxplot(mapping = aes(
x = reorder(get(var_x),get(var_y),FUN = median),
y = get(var_y),fill=get(var_x)
)) +
geom_jitter(mapping = aes(x=get(var_x),y=get(var_y)),position=position_jitter(0.2))+
labs(title = Titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold"))
creaboxplot <- function(Datos, var_x,var_y,Titulo,xlabel="NA",ylabel="NA"){
ggplot(data = Datos) +
geom_boxplot(mapping = aes(
x = reorder(get(var_x),get(var_y),FUN = median),
y = get(var_y),fill=get(var_x)
)) +
geom_jitter(mapping = aes(x=get(var_x),y=get(var_y)),position=position_jitter(0.2))+
labs(title = Titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold"))
}
creaboxplot(df,name2,name1,"Box Plot por Tratamiento","Mejoria","Tratamiento")
crea_errdiagram <- function(Datos,columna,agrupapor,titulo="Titulo",xlabel="xlabel",ylabel="ylabel"){
dfsumarize <- Datos %>%
group_by(get(agrupapor)) %>%
summarise(
sd = sd(get(columna),na.rm = TRUE),
media = mean(get(columna)))
#####
#  Creo grafico de errores o de medias
####
ggplot(dfsumarize, aes(x=reorder(`get(agrupapor)`,media), y=media,color=`get(agrupapor)`)) +
geom_line(aes(group = 1)) +
geom_errorbar( aes(ymin=media-sd,ymax=media + sd),width = 0.2) +
geom_point(size = 2) +
labs(title = titulo,
subtitle = "",
caption = "Data source: Analiza tus Datos",
x = xlabel,
y = ylabel,
tag = "Primeros Programas con R") +
theme(plot.title    = element_text(size =12, face = "bold", hjust = 0.5  ),
plot.subtitle = element_text(size = 9, hjust = 0.5),
plot.caption  = element_text(size = 7),
plot.tag      = element_text(size = 7),
axis.text     = element_text(size=8),
axis.title    = element_text(size=8,face="bold"))
}
crea_errdiagram(df,name1,name2,"Box Plot por Tratamiento","Tratamiento","Mejoria")
##
# Se definen funciones
##
descriptiva <-  function(Datos,columnas,colagruparpor) {
filtrar_por <-  unique(Datos[,colagruparpor])
listaout <- list()
for (g in (1:nrow(filtrar_por)))
{
df <-   filter(Datos, (Datos[,colagruparpor] == str_trim(filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
for (i in (2:ncol(df)))
{
lista <- list(
Grupo = str_trim(filtrar_por[g,1]),
media =   format(apply(df[,i],2,mean),nsmall=1,big.mark = ","),
cutmedia =    format(apply(df[,i],2,mean,trim=0.05),nsmall=1,big.mark = ","),
StdErr   =    format(apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length)),nsmall=1,big.mark = ","),
IC95LimInf =  format(apply(df[,i],2,mean) - (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
IC95LimSup =  format(apply(df[,i],2,mean) + (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
mediana=   format(apply(df[,i],2,median),nsmall=1,big.mark = ","),
sd=    format(apply(df[,i],2,sd),nsmall=1,big.mark = ","),
var =   format(apply(df[,i],2,var),nsmall=1,big.mark = ","),
obs =   apply(df[,i],2,length),
Min =   format(apply(df[,i],2,min),nsmall=1,big.mark =","),
Max=    format(apply(df[,i],2,max),nsmall=1,big.mark = ","),
Rango =   format(apply(df[,i],2,max) -  apply(df[,i],2,min),nsmall = 1,big.mark = ","),
RangoIQR =  format( apply(df[,i],2,quantile,prob=0.75) - apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q1=   format(apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q3=   format(apply(df[,i],2,quantile,prob=0.75),nsmall = 1, big.mark = ","),
skew=    round(apply(df[,i],2,skew),2),
kurtosis =   round(apply(df[,i],2, kurtosi))
)
listaout[[str_trim(filtrar_por[g,1])]] <- lista
}
}
#Colocando Nombres a las Columnas y Filas a la matriz estadistica descriptiva
mt <- matrix(ncol = nrow(filtrar_por), nrow = 18 )
colnames(mt) <- names(listaout)
rownames(mt) <- names(listaout[[1]])
for (i in names(listaout))
{
mt[,i] <- unlist(listaout[[i]])
}
mt
}
View(descriptiva)
descriptiva(df,df[,12],df[,11])
descriptiva(df,12,11)
descriptiva(df,12,11)
##
# Se definen funciones
##
descriptiva <-  function(Datos,columnas,colagruparpor) {
filtrar_por <-  unique(Datos[,colagruparpor])
listaout <- list()
for (g in (1:nrow(filtrar_por)))
{
df <-   filter(Datos, (Datos[,colagruparpor] == str_trim(filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
for (i in (2:ncol(df)))
{
lista <- list(
Grupo = str_trim(filtrar_por[g,1]),
media =   format(apply(df[,i],2,mean),nsmall=1,big.mark = ","),
cutmedia =    format(apply(df[,i],2,mean,trim=0.05),nsmall=1,big.mark = ","),
StdErr   =    format(apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length)),nsmall=1,big.mark = ","),
IC95LimInf =  format(apply(df[,i],2,mean) - (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
IC95LimSup =  format(apply(df[,i],2,mean) + (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
mediana=   format(apply(df[,i],2,median),nsmall=1,big.mark = ","),
sd=    format(apply(df[,i],2,sd),nsmall=1,big.mark = ","),
var =   format(apply(df[,i],2,var),nsmall=1,big.mark = ","),
obs =   apply(df[,i],2,length),
Min =   format(apply(df[,i],2,min),nsmall=1,big.mark =","),
Max=    format(apply(df[,i],2,max),nsmall=1,big.mark = ","),
Rango =   format(apply(df[,i],2,max) -  apply(df[,i],2,min),nsmall = 1,big.mark = ","),
RangoIQR =  format( apply(df[,i],2,quantile,prob=0.75) - apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q1=   format(apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q3=   format(apply(df[,i],2,quantile,prob=0.75),nsmall = 1, big.mark = ","),
skew=    round(apply(df[,i],2,skew),2),
kurtosis =   round(apply(df[,i],2, kurtosi))
)
listaout[[str_trim(filtrar_por[g,1])]] <- lista
}
}
#Colocando Nombres a las Columnas y Filas a la matriz estadistica descriptiva
mt <- matrix(ncol = nrow(filtrar_por), nrow = 18 )
colnames(mt) <- names(listaout)
rownames(mt) <- names(listaout[[1]])
for (i in names(listaout))
{
mt[,i] <- unlist(listaout[[i]])
}
mt
}
descriptiva(df,12,11)
descriptiva(df,11,12)
descriptiva(df,12,11)
unique(df$diffodi)
$unique(df[,11])
unique(df[,11])
nrow(unique(df[,11]))
filtrar_por <- unique(df[,11])
filtrar_por
filter(df,df[,11] == str_trim(filtrar_por[1,1]))
df[,11]
filter(df,str_trim(df[,11]) == str_trim(filtrar_por[1,1]))
filter(df,df[,11] == str_trim(filtrar_por[1,1]))
filter(df,df[,11] == filtrar_por[1,1])
filter(df,df[,11] == filtrar_por[1,1])
rlang::last_error()
filter(df,df[,11] %in% filtrar_por[1,1])
filter(df,df[,11] %in% filtrar_por[1,1])
typeof(filtrar_por[1,1])
filtrar_por
filtrar_por[1,1]
df[1,11]
filter(df,df[,11] = filtrar_por[1,1])
typeof(df[1,11])
filtrar_por[1,1]
filtrar_por[1,1][1]
filtrar_por[1,1][[1]]
typeof(filtrar_por[1,1][[1]])
typeof(filtrar_por[1,1][[2]])
typeof(filtrar_por[1,1][[1]])
compare.list(filter(df,df[,11],filtrar_por[1,1]))
compare.list(filter(df,df[,11],filtrar_por[1,1]))
filter(df,df[,11] %in% filtrar_por[1,1])
filter(df,df[1,11] %in% filtrar_por[1,1])
filter(df,df[1,11] %in% filtrar_por[1,1])
is.factor(filtrar_por[1,1])
is.list(filtrar_por[1,1])
is.list(df[,11])
##
# Se definen funciones
##
descriptiva <-  function(Datos,columnas,colagruparpor) {
filtrar_por <-  unique(Datos[,colagruparpor])
listaout <- list()
for (g in (1:nrow(filtrar_por)))
{
if (is.list(Datos[,colagruparpor]) & is.list(filtrar_por[g,1]))
{
df <-   filter(Datos, (Datos[,colagruparpor] %in% (filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
} else
{
df <-   filter(Datos, (Datos[,colagruparpor] == str_trim(filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
}
for (i in (2:ncol(df)))
{
lista <- list(
Grupo = str_trim(filtrar_por[g,1]),
media =   format(apply(df[,i],2,mean),nsmall=1,big.mark = ","),
cutmedia =    format(apply(df[,i],2,mean,trim=0.05),nsmall=1,big.mark = ","),
StdErr   =    format(apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length)),nsmall=1,big.mark = ","),
IC95LimInf =  format(apply(df[,i],2,mean) - (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
IC95LimSup =  format(apply(df[,i],2,mean) + (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
mediana=   format(apply(df[,i],2,median),nsmall=1,big.mark = ","),
sd=    format(apply(df[,i],2,sd),nsmall=1,big.mark = ","),
var =   format(apply(df[,i],2,var),nsmall=1,big.mark = ","),
obs =   apply(df[,i],2,length),
Min =   format(apply(df[,i],2,min),nsmall=1,big.mark =","),
Max=    format(apply(df[,i],2,max),nsmall=1,big.mark = ","),
Rango =   format(apply(df[,i],2,max) -  apply(df[,i],2,min),nsmall = 1,big.mark = ","),
RangoIQR =  format( apply(df[,i],2,quantile,prob=0.75) - apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q1=   format(apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q3=   format(apply(df[,i],2,quantile,prob=0.75),nsmall = 1, big.mark = ","),
skew=    round(apply(df[,i],2,skew),2),
kurtosis =   round(apply(df[,i],2, kurtosi))
)
listaout[[str_trim(filtrar_por[g,1])]] <- lista
}
}
#Colocando Nombres a las Columnas y Filas a la matriz estadistica descriptiva
mt <- matrix(ncol = nrow(filtrar_por), nrow = 18 )
colnames(mt) <- names(listaout)
rownames(mt) <- names(listaout[[1]])
for (i in names(listaout))
{
mt[,i] <- unlist(listaout[[i]])
}
mt
}
descriptiva(df,12,11)
##
# Se definen funciones
##
descriptiva <-  function(Datos,columnas,colagruparpor) {
filtrar_por <-  unique(Datos[,colagruparpor])
listaout <- list()
for (g in (1:nrow(filtrar_por)))
{
if (is.list(filtrar_por[g,1]))
{
df <-   filter(Datos, (Datos[,colagruparpor] %in% (filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
} else
{
df <-   filter(Datos, (Datos[,colagruparpor] == str_trim(filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
}
for (i in (2:ncol(df)))
{
lista <- list(
Grupo = str_trim(filtrar_por[g,1]),
media =   format(apply(df[,i],2,mean),nsmall=1,big.mark = ","),
cutmedia =    format(apply(df[,i],2,mean,trim=0.05),nsmall=1,big.mark = ","),
StdErr   =    format(apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length)),nsmall=1,big.mark = ","),
IC95LimInf =  format(apply(df[,i],2,mean) - (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
IC95LimSup =  format(apply(df[,i],2,mean) + (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
mediana=   format(apply(df[,i],2,median),nsmall=1,big.mark = ","),
sd=    format(apply(df[,i],2,sd),nsmall=1,big.mark = ","),
var =   format(apply(df[,i],2,var),nsmall=1,big.mark = ","),
obs =   apply(df[,i],2,length),
Min =   format(apply(df[,i],2,min),nsmall=1,big.mark =","),
Max=    format(apply(df[,i],2,max),nsmall=1,big.mark = ","),
Rango =   format(apply(df[,i],2,max) -  apply(df[,i],2,min),nsmall = 1,big.mark = ","),
RangoIQR =  format( apply(df[,i],2,quantile,prob=0.75) - apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q1=   format(apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q3=   format(apply(df[,i],2,quantile,prob=0.75),nsmall = 1, big.mark = ","),
skew=    round(apply(df[,i],2,skew),2),
kurtosis =   round(apply(df[,i],2, kurtosi))
)
listaout[[str_trim(filtrar_por[g,1])]] <- lista
}
}
#Colocando Nombres a las Columnas y Filas a la matriz estadistica descriptiva
mt <- matrix(ncol = nrow(filtrar_por), nrow = 18 )
colnames(mt) <- names(listaout)
rownames(mt) <- names(listaout[[1]])
for (i in names(listaout))
{
mt[,i] <- unlist(listaout[[i]])
}
mt
}
descriptiva(df,12,11)
debugSource('~/Analiza tus Datos/Etapa 2/Bloque 5 Analiza tus Datos/Comprobar Restricciones/5 TestEstadisticosCompHipotesis.R')
#********************************************************************
# 1.2 CARGAR PAQUETES O CREAR FUNCIONES
#********************************************************************
# Carga los paquetes sinÃ³ los tienes cargados
lapply(.packages, require, character.only=TRUE)
filter(df,df[1,11] %in% filtrar_por[1,1])
filter(df,df[1,11] %in% filtrar_por[1,1]) %>% dplyr::select(c(11,12))
ddt <- filter(df,df[1,11] %in% filtrar_por[1,1]) %>% dplyr::select(c(11,12))
for (i in (2:ncol(df)))
{print(i)}
##
# Se definen funciones
##
descriptiva <-  function(Datos,columnas,colagruparpor) {
filtrar_por <-  unique(Datos[,colagruparpor])
listaout <- list()
for (g in (1:nrow(filtrar_por)))
{
if (is.list(filtrar_por[g,1]))
{
df <-   filter(Datos, (Datos[,colagruparpor] %in% (filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
} else
{
df <-   filter(Datos, (Datos[,colagruparpor] == str_trim(filtrar_por[g,1])) ) %>%
dplyr::select(c(colagruparpor,columnas))
}
for (i in (2:ncol(df)))
{
lista <- list(
Grupo = str_trim(filtrar_por[g,1]),
media =   format(apply(df[,i],2,mean),nsmall=1,big.mark = ","),
cutmedia =    format(apply(df[,i],2,mean,trim=0.05),nsmall=1,big.mark = ","),
StdErr   =    format(apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length)),nsmall=1,big.mark = ","),
IC95LimInf =  format(apply(df[,i],2,mean) - (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
IC95LimSup =  format(apply(df[,i],2,mean) + (1.96 *  apply(df[,i],2,sd) / sqrt(apply(df[,i],2,length))),nsmall=1,big.mark = ","),
mediana=   format(apply(df[,i],2,median),nsmall=1,big.mark = ","),
sd=    format(apply(df[,i],2,sd),nsmall=1,big.mark = ","),
var =   format(apply(df[,i],2,var),nsmall=1,big.mark = ","),
obs =   apply(df[,i],2,length),
Min =   format(apply(df[,i],2,min),nsmall=1,big.mark =","),
Max=    format(apply(df[,i],2,max),nsmall=1,big.mark = ","),
Rango =   format(apply(df[,i],2,max) -  apply(df[,i],2,min),nsmall = 1,big.mark = ","),
RangoIQR =  format( apply(df[,i],2,quantile,prob=0.75) - apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q1=   format(apply(df[,i],2,quantile,prob=0.25),nsmall = 1, big.mark = ","),
Q3=   format(apply(df[,i],2,quantile,prob=0.75),nsmall = 1, big.mark = ","),
skew=    round(apply(df[,i],2,skew),2),
kurtosis =   round(apply(df[,i],2, kurtosi))
)
listaout[[str_trim(filtrar_por[g,1])]] <- lista
}
}
#Colocando Nombres a las Columnas y Filas a la matriz estadistica descriptiva
mt <- matrix(ncol = nrow(filtrar_por), nrow = 18 )
colnames(mt) <- names(listaout)
rownames(mt) <- names(listaout[[1]])
for (i in names(listaout))
{
mt[,i] <- unlist(listaout[[i]])
}
mt
}
descriptiva(df,12,11)
data <- summary(df)
by(data,df$Grupo,summmary)
by(data,df$Grupo,summmary)
data
data <- summary(df %>% select(11,12))
data
by(data,df$Grupo,summmary)
library(FSA)
install.packages(PSA)
install.packages("PSA")
library(FSA)
install.packages("FSA")
library(FSA)
Summarize(diffodi ~ Grupo,
data=df)
#********************************************************************
# 1.1 INSTALAR PAQUETES DE FUNCIONES
#********************************************************************
# Lista de paquetes de funciones a instalar
.packages = c("FSA","car","plotly","ggplot2", "plotly", "xlsx","scales","stringr","readr","dplyr","psych","readxl","ggpubr","PerformanceAnalytics")
.packages %in% installed.packages()
##
# Instala los paquetes sinÃ³ los tienes instalados
##
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
##
# Se hace una descriptiva por Grupo de tratamiento
##
Summarize(diffodi ~ Grupo,
data=df)
levene.test(df$diffodi ~ df$Grupo,Data = df)
leveneTest(df$diffodi ~ df$Grupo,Data = df)
